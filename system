#!/bin/bash

# VPN-Admin -- A script base system for managing a small OpenVPN system
#
# Copyright (C) 2018 by Matthew Dwight.
#
# This code released under version 3 of the GNU GPL; see COPYING and the
# LICENSE.GPL for this project for full licensing details.
#

# Script to manage the OpenVPN service and tie into the configurations.

# Main directories for setup and system.
SYSTEM_DIR="/etc/openvpn"

# If user want to modify some of the defaults.
if [ -f ./vars ] ; then
    . ./vars
fi

# Root directory for configuration.
SETUP_DIR=$PWD

# Bring in shared functions
. ./shared.sh

function usage {

    case "$1" in 

# HELP for load command
    load)
        printf "
Usage: $0 $1 configuration_name

This command will shutdown the running OpenVPN service and remove the running
configuration files.  If no configuration is supplied it will update the 
current configuration file.  Also replaced are the CCD (Client Configuration
Files) and CRL (Certificate Revocation List) file.  Use this when making
configuration changes.  

"
    ;;
    
# HELP for restart command
    restart)
        printf "
Usage: $0 $1 

This command will shutdown the running OpenVPN service and update the the CRL
file before starting the OpenVPN system again.  The configuration of the system
remains unchanged. This should be done when a certificate is revoked. 

"
    ;;
    
# HELP for start command
    start)
        printf "
Usage: $0 $1 

This command will start the OpenVPN service if it is not running. If the service is
not running it will also copy over the CRL file starting the OpenVPN service. 
It will also re-enable the OpenVPN service to start when the system is booted.

"
    ;;
    
# HELP for stop command
    stop)
        printf "
Usage: $0 $1 

This command will shutdown the running OpenVPN service and disable it from
starting when the system boots.

"
    ;;
    
# HELP for the status command
    status)
        printf "
Usage: $0 $1 

This command will display the current status of the OpenVPN service and also
show if it is enabled to start when the system starts up.

"
    ;;
    
# HELP for help
    help)
        printf "
Usage: $0 $1 command

Get more detailed help on each command.

   load - load new configuration files and restart.
restart - load just the CRL and restart.
  start - start and enable OpenVPN.
   stop - stop and disable OpenVPN.
 status - show the current status of the OpenVPN service.
   help - This help

"
    ;;
    
# HELP main help
    *)
        if [ "" != "$1" ] ; then
            printf "\nError: Unknown commands \`$1\`.\n"
        fi
        printf "
Usage: $0 {command}

   load - load new configuration files and restart.
restart - load just the CRL and restart.
  start - start and enable OpenVPN.
   stop - stop and disable OpenVPN.
 status - show the current status of the OpenVPN service.
   help - help on specific command.

"
    ;;
esac    
}
 
function load {
    # STEP 1 - Drop extension to certificate if supplied
    CONFIG="${1//.conf}"
    
    # STEP 2 - If config name not supplied get current running config.
    # will only find the first occurrence. 
    if [ "" == "$CONFIG" ] && [ -f $SYSTEM_DIR/*.conf ] ; then
        for entry in `(cd /etc/openvpn && ls -1 *.conf)` ; do
            CONFIG="${entry//.conf}"
            printf "Running config $CONFIG.conf found. Will try to update.\n"
        done
    fi
    
    # STEP 3 - See if config file exist
    if [ ! -f ./configs/$CONFIG.conf ] ; then
        if [ "" = "$CONFIG" ] ; then
            printf "Error: No active configuration file found. Please supply configuration file name.\n"
        else
            printf "Configuration file ./server/$CONFIG.conf does not exist!\nReload Failed.\n"
        fi
        printf "\nCurrent available configurations files:\n----------------------------------------------\n"
        if [ -d $SETUP_DIR/configs ] ; then
            if [ "$(ls -A $SETUP_DIR/configs/*.conf)" ]; then
                find $SETUP_DIR/configs/*.conf  -printf "%f\n"
            fi
        fi       
        exit 1
    fi

    # STEP 4 - make sure user has sudo access
    sudo_check

    # STEP 5 - Stop the OpenVPN System
    if ( sudo systemctl is-active openvpn.service > /dev/null ) ; then
        printf "Stopping the OpenVPN system\n"
        sudo systemctl stop openvpn.service
        sleep 3  # make sure it is stopped
    else
        printf "OpenVPN is not currently running.\n"
    fi

    # STEP 6 - remove current running configuration.
    printf "Deleting configuration files from $SYSTEM_DIR/\n"
    sudo rm -f $SYSTEM_DIR/*.conf
    sudo rm -f $SYSTEM_DIR/ccd/*
    sudo rm -f $SYSTEM_DIR/ipp.txt
    sudo rm -f $SYSTEM_DIR/*.log

    # STEP 7 - Copy over configuration, ccd and crl files.
    printf "Copying over configuration \`$CONFIG.conf\` from $SETUP_DIR\n"
    sudo cp ./configs/$CONFIG.conf $SYSTEM_DIR/
    if [ ! -d "$SYSTEM_DIR/ccd/" ] ; then
        sudo mkdir "$SYSTEM_DIR/ccd/"
    fi    
    printf "Copying over Client Configuration Files from $SETUP_DIR/ccd/\n"
    sudo cp ./ccd/*  $SYSTEM_DIR/ccd/
    printf "Copying over Certificate Revocation List file $SETUP_DIR/crl.pem\n"
    sudo cp ./easyrsa3/pki/crl.pem $SYSTEM_DIR/

    # STEP 8 - Start the OpenVPN System
    start

    # STEP 9 - See if it is running
    status
}


function restart {
    # STEP 1 - Make sure user has sudo access
    sudo_check

    # STEP 2 - Stop the OpenVPN System
    if ( sudo systemctl is-active openvpn.service > /dev/null ) ; then
        printf "Stopping the OpenVPN system\n"
        sudo systemctl stop openvpn.service
        sleep 3  # make sure it is stopped
    else
        printf "OpenVPN is not currently running.\n"
        exit 1
    fi

    # STEP 3 - Copy over crl file.
    printf "Copying over CRL file from $SETUP_DIR\n"
    sudo cp ./easyrsa3/pki/crl.pem $SYSTEM_DIR/

    # STEP 4 - Start the OpenVPN System
    if ( ! sudo systemctl is-active openvpn.service > /dev/null ) ; then
        printf "Starting the OpenVPN service\n"
        sudo systemctl start openvpn.service
        sleep 3  # make sure it is started
    else
        printf "OpenVPN is currently running.\n"
    fi

    # STEP 5 - See if it is running
    status
}

function start {
    # STEP 1 - Make sure user has sudo access
    sudo_check

    # STEP 2 - Start the OpenVPN System
    if ( ! sudo systemctl is-active openvpn.service > /dev/null ) ; then
        printf "Copying over CRL file from $SETUP_DIR\n"
        sudo cp ./easyrsa3/pki/crl.pem $SYSTEM_DIR/
        printf "Starting the OpenVPN service\n"
        sudo systemctl start openvpn.service
        sleep 3  # make sure it is started
    else
        printf "OpenVPN is already running.\n"
    fi

    # STEP 3 - Enable OpenVPN server to start at boot.
    if ( ! sudo systemctl is-enabled openvpn.service > /dev/null ) ; then
        printf "Enabling OpenVPN to start at boot.\n"
        sudo systemctl enable openvpn.service
    else
        printf "OpenVPN is already enabled to start at boot.\n"
    fi

    # STEP 4 - Show the current status
    status
}

function stop {
    # STEP 1 - Make sure user has sudo access
    sudo_check

    # STEP 2 - Stop the OpenVPN System
    if ( sudo systemctl is-active openvpn.service > /dev/null ) ; then
        printf "Stopping the OpenVPN system\n"
        sudo systemctl stop openvpn.service
        sleep 3  # make sure it is stopped
    else
        printf "OpenVPN is already stopped.\n"
    fi

    # STEP 3 - Disable OpenVPN server from starting.
    if ( sudo systemctl is-enabled openvpn.service > /dev/null ) ; then
        printf "Disabling OpenVPN from starting at boot.\n"
        sudo systemctl disable openvpn.service
    else
        printf "OpenVPN is already disabled to start at boot.\n"
    fi

    # STEP 4 - Show the current status.
    status
}

function status {
    # View the current status of OpenVPN
    printf "Current Status of OpenVPN is   : "
    sudo systemctl is-active openvpn.service
    printf "Starting of OpenVPN at boot is : "
    sudo systemctl is-enabled openvpn.service
    exit 0
}

# Call the requested function.
case "$1" in 
    load)
        load $2
        ;;
    restart)
        restart
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    help)
        usage $2 $3
        ;;
    *)
        usage $1 $2 
        ;;
    
esac
exit 1 

