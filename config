#!/bin/bash
# VPN-Admin -- A script base system for managing a small OpenVPN system
#
# Copyright (C) 2018 by Matthew Dwight.
#
# This code released under version 3 of the GNU GPL; see COPYING.md and the 
# LICENSE.md for this project for full licensing details.

# Script to manage the configuration of OpenVPN with Easy-RSA3

# Default to nopass for CA and Certificates. 
NOPASS="nopass"

# Set expiry dates on Certificates 
export EASYRSA_CRL_DAYS=7305      # 20 years
export EASYRSA_CA_EXPIRE=7305     # 20 years
export EASYRSA_CERTFILE_EXPIRE=7305   # 20 years

# If user want to modify some of the above defaults.
if [ -f ./vars.sh ] ; then
    . ./vars.sh
fi

# Root directory for configuration.
SETUP_DIR=$PWD

# Bring in shared functions
. ./shared.sh

function usage {

case "$1" in 
# HELP for initialize 
    initialize)
    printf "
Usage: $0 $1 [ASKPASS] [DH]

This script will delete all the configuration, key and certificate files.  The 
parameter files and the client configuration files will not be touched.  A new 
CA will then be created along with the tls-auth pre-shared key.  The existing
Diffie-Hellman parameters file will be retained, if it exists, so it does not 
need to be regenerated.  The Diffie-Hellman parameters file can take a very
long time to generate and only needs to be done once.

Optional Parameters:
--------------------
ASKPASS - If you want to put a pass-phrase on the generated CA private key.
DH - If you want to generate a new Diffie-Hellman parameters file.

"      
        ;;
        
# HELP for create
    create)
    printf "
Usage: $0 $1 certificate_name parfile [ASKPASS]

This script will add or regenerate the configuration file for a client or 
server.  If the certificate exist it will be reused, otherwise a new one will
be generated.  The configuration will have the same name as the certificate.

Required Parameters:
--------------------
certificate_name - name get give or used by certificate.
parfile - name of parameter file to use.

Optional Parameters:
--------------------
ASKPASS - If you want to put a pass-phrase on the generated private key.

Current configuration files:
----------------------------\n"
        if [ "$(ls -A $SETUP_DIR/easyrsa3/pki/issued)" ]; then
            find $SETUP_DIR/easyrsa3/pki/issued/*  -printf "%f\n"
        fi       
        printf "
List of parameter files:
------------------------\n"
        count=`ls -1 $SETUP_DIR/parameters/*.par 2>/dev/null | wc -l`
        if [ 0 -lt $count ] ; then
            find $SETUP_DIR/parameters/*.par  -printf "%f\n"
        fi
        printf "\n"

        ;;

#HELP for delete
    delete)
    printf "
Usage: $0 $1 certificate_name


Deletes a certificate along with the configuration file.  After the 
Certificate is deleted the Certificate Revocation List is updated.

Required Parameters:
--------------------
certificate_name - name used by certificate.

List of certificate files:
--------------------------\n"
        if [ "$(ls -A $SETUP_DIR/easyrsa3/pki/issued)" ]; then
            find $SETUP_DIR/easyrsa3/pki/issued/*  -printf "%f\n"
        fi       
        
        printf "\n"

        ;;

# HELP for CRL generation.
    crl)
        printf "
Usage: $0 $1

Generate the (CRL) Certificate Revocation List file.  This script should not 
normally be required since this CRL list is generated every time the './remove'
script is run.  Running it again will not cause any problems.

"
        ;;
# HELP for pass-phrase change
    pass)
        printf "
Usage: $0 $1 key_name [NOPASS]

Allows the private key pass-phrase for a certificate or the Certificate 
Authority to be changed or removed. The key name will be the same as the 
certificate name and config name.

Required Parameters:
--------------------
key_name - The name of the key to change the pass-phrase on.

Optional Parameters:
--------------------
NOPASS - If you want to remove a pass-phrase on the private key.

List of key files:
------------------\n"
        find $SETUP_DIR/easyrsa3/pki/private/*  -printf "%f\n"
        printf "\n"
        ;;

# HELP for help
    help)
        printf "
Get more detailed Help on the following commands.

Usage: $0 $1 command

Available Commands
------------------
initialize - Initialize the system. 
    create - Create a server or client configuration file.
    delete - Delete a server or client configuration and revoke certificate.
      pass - Change the passphrase on a certificate or ca.
       crl - Create and updated Certificate Revocaton List.           
      help - This help.
      
"
        ;;
# HELP - Main HELP
     *)
        if [ "" != "$1" ] ; then
            printf "\nError: Unknown commands \`$1\`.\n"
        fi
        printf "
Usage: $0 {initialize|create|delete|passphrase|crl} [name]

Configuration System

initialize - Initialize the system. 
    create - Create a server or client configuration file.
    delete - Delete a server or client configuration and revoke certificate.
      pass - Change the passphrase on a certificate or ca.
       crl - Create and updated Certificate Revocaton List.           
      help - Display more detailed help on the above commands.
      
"
        ;;
esac
}

function initialize {
    easyrsa_check  # do we even have a system to initialize?
    
    if [ "ASKPASS" == "${1^^}" ] || [ "ASKPASS" == "${2^^}" ]; then 
        NOPASS=""
    fi

    if [ "DH" == "${1^^}" ] || [ "DH" == "${2^^}" ]; then 
        DH=yes
    else
        DH=no
    fi

    # STEP 1 - Verify the system is to be initialized if already initialized.
    if [ -f $SETUP_DIR/easyrsa3/pki/ca.crt ] ; then  # 
        printf "It appears the system has already been initialized.  Initializing\n"
        printf "the system will remove all current keys and certificates. Are you\n"
        verify "Sure you want to initialize the system (Yes/No) > "
        if [ 0 != $? ] ; then 
            exit 1 
        fi

        verify "                  Are you really sure? (Yes/No) > "
        if [ 0 != $? ] ; then 
            exit 1 
        fi
        printf "Starting Initialization.\n"
    fi
    
    # STEP 2 - Backup ./easyrsa3/pki/dh.pem if it exists.
    if [ -f ./easyrsa3/pki/dh.pem ] ; then 
        if [ -f ./dh.pem ] ; then
            rm ./dh.pem
        fi
        mv ./easyrsa3/pki/dh.pem .
    fi

    # Step 3 = Check if a new Diffie-Hellman parameters file is requested.
    if [ -f ./dh.pem ] && [ "yes" == $DH ] ; then
        printf "Removing Diffie-Helman parameters file.\n"
        rm ./dh.pem
    fi

    if [ -f ./dh.pem ] ; then
        printf "Retaining Diffie-Hellman parameters file \'./easyrsa3/pki/dh.pem\'.\n"
    fi

    # STEP 4 - Clear our client and server configuration files
    printf "Removing Generated configuration files.\n"
    rm -fr configs

    # STEP 5 - Remove previous PKI system if it existed.
    printf "Removing old PKI system\n"
    rm -fr ./easyrsa3/pki

    # STEP 6 - Generate new PKI system
    printf "Generating new pki system\n"
    cd ./easyrsa3/
    ./easyrsa init-pki

    # STEP 7 - Generate ta.key
    printf "Generating ta.key\n"
    openvpn --genkey --secret pki/ta.key

    # STEP 8 - Generate new certificate authority
    printf "Generating Certificate Authority \n"
    if ! ./easyrsa build-ca $NOPASS; then
        printf "Error - System NOT initialized.\n"
        exit 1
    fi

    # STEP 9 - Generate or Restore Diffie-Helmman key
    if [ -f ../dh.pem ] ; then
        printf "Restoring dh.pem file.\n"
        mv ../dh.pem ./pki/dh.pem
    else
        printf "Generating dh.pem file.\n"
        ./easyrsa gen-dh
    fi
    cd $SETUP_DIR

    # STEP 10 - Generate a Certificate Revocation List
    crl

    printf "System is initialized.\n\n"
}

function create {
    # $1 - certificate name
    # $2 - parameter file name
    # Create Certificates if not already issued.
    # Saves config files with the same name as the certificate.
    
    easyrsa_check   # has easyrsa3 been installed?
    ca_check        # has easyrsa3 been initialized?
    
    if [ "ASKPASS" == "${3^^}" ] ; then  # requesting to add pass-phrase
        NOPASS=""
    fi

    # STEP 1 - clean up aborted certificate creation attempts
    rm -f $SETUP_DIR/easyrsa3/pki/private/*.key.*
    rm -f $SETUP_DIR/easyrsa3/pki/reqs/*.req.*
    rm -f $SETUP_DIR/easyrsa3/pki/issued/*.crt.*

    # STEP 2 - check if the right number of parameters were supplied.
    if [ $# -lt 2 ] ; then
        usage create
        exit 1
    fi

    printf "Note: Starting configuration file generation for $1.conf\n"
    # STEP 3 - check to see if parameter file exists
    PARFILE="${2//.par}"
    if [ ! -f ./parameters/$PARFILE.par ];
        then
            printf "Error Parameter: $PARFILE.par does not exist.\n"
            exit 1
    fi
    printf "OK: Parameter $PARFILE.par found.\n"

    # STEP 4 - find out whether it is a client or server parameter file.
    parameter_type './parameters/'$PARFILE'.par'  
    local RETURN=$?
    if [ "1" == $RETURN ] ; then
        PARMFILETYPE="Server"
    elif [ "2" == $RETURN ] ; then
        PARMFILETYPE="Client"
    elif [ "3" == $RETURN ] ; then
        printf "Error: $PARFILE.par is an unknown type of parameter file.\n"
        exit 1
    else
        printf "Error: $PARFILE.par not found.\n"
        exit 1
    fi
    printf "Note: Parameter File $PARFILE.par is for a $PARMFILETYPE.\n"
   
    # STEP 5 - check to see if diffie-hellman key file exists
    if [ ! -f ./easyrsa3/pki/dh.pem ] ; then
        printf "Error DH: dh.pem does not exist. System not initialized?\n"
        exit 1
    fi
    printf "OK: dh.pem exists\n"

    # STEP 6 - check to see if tls-auth key file exists
    if [ ! -f ./easyrsa3/pki/ta.key ] ; then
        printf "Error TA: ta.key does not exist. System not initialized?\n"
        exit 1
    fi
    printf "OK: ta.key exists\n"

    # STEP 7 - check to see if certificate authority key exists
    if [ ! -f ./easyrsa3/pki/private/ca.key ] ; then
        printf "Error CA: ca.key does not exist. System not initialized?\n"
        exit 1
    fi
    printf "OK: ca.key exits\n"

    # STEP 8 - see if certificate already exists. If so then skip creating another one.
    CERTFILE="${1//.crt}"
    if [ ! -f ./easyrsa3/pki/issued/$CERTFILE.crt ] ; then
       # if certificate does not exist remove any intermediate key and req files.
        if [ -f ./easyrsa3/pki/private/$CERTFILE.key ] ; then
            rm ./easyrsa3/pki/private/$CERTFILE.key
            printf "Cleanup: Removing file ./pki/private/$CERTFILE.key\n"
        fi
        if [ -f ./easyrsa3/pki/reqs/$CERTFILE.req ] ; then
            rm ./easyrsa3/pki/reqs/$CERTFILE.req
            printf "Cleanup: Removing file ./pki/reqs/$CERTFILE.req\n"
        fi
        # generate new key files.
        cd ./easyrsa3/
        if [ "Server" == "$PARMFILETYPE" ] ; then 
            printf "Note: Creating Server Certificate for $CERTFILE\n"
            if ./easyrsa build-server-full $CERTFILE $NOPASS ; then
                printf "OK: Server certificate $CERTFILE.crt was created.\n"
            else
                printf "Error: Server certificate $CERTFILE.crt was not created.\n"
                exit 1
            fi
        elif [ "Client" == "$PARMFILETYPE" ] ; then
            printf "Note: Creating Client Certificate for $CERTFILE\n"
            if ./easyrsa build-client-full $CERTFILE $NOPASS ; then
                printf "OK: Client certificate $CERTFILE.crt was created.\n"
            else
                printf "Error: Client certificate $CERTFILE.crt was not created.\n"
                exit 1
            fi
        else
            # we should never get here.
            printf "Error: Script Error - unknown parameter file type $PARMFILETYPE defined.\n"
            exit 1
        fi
        cd ..
        #
    else
        printf "Note: Certificate $CERTFILE.crt already exists. Reusing certificate.\n"
    fi

    # STEP 9 - check to see if certificate is created.
    if [ ! -f ./easyrsa3/pki/issued/$CERTFILE.crt ] ; then
        printf "Error: Certificate for $CERTFILE was not created.\n"
        exit 1
    fi
    printf "OK: Certificate for $CERTFILE is available.\n"

    # STEP 10 - check to see if the certificate type matches the parameter file type. 
    certificate_type './easyrsa3/pki/issued/'$CERTFILE'.crt' 
    local RETURN=$?
    if [ "1" == $RETURN ] ; then
        CERTFILETYPE="Server"
    elif [ "2" == $RETURN ] ; then
        CERTFILETYPE="Client"
    elif [ "3" == $RETURN ] ; then
        printf "Error: \'$CERTFILE\'.crt is an unknown type of certificate file.\n"
        exit 1
    else
        printf "Error: \'$CERTFILE\'.crt not found.\n"
        exit 1
    fi
    if [ $CERTFILETYPE != $PARMFILETYPE ] ; then
        printf "Error: Certificate type and Parameter file type don't match.\n"
        printf "Note:  The previously issued certificate $CERTFILE.crt is for a $CERTFILETYPE.\n"
        printf "Note:  The parameter file $PARFILE.par is for a $PARMFILETYPE.\n"
        exit 1
    fi
    printf "OK: Template and Certificate type match.\n"

    # STEP 11 - check to see if key file exists.
    #          note: key file should exist if certificate exist.
    if [ ! -f ./easyrsa3/pki/private/$CERTFILE.key ] ; then
        printf "Error: $CERTFILE.key does not exist but $CERTFILE.crt does.  Try ./delete first to correct.\n"
        exit 1
    fi

    # STEP 12 - make sure the "config" sub directory exists. If not create it.
    if [ ! -d configs ] ; then
        printf "Note: Creating directory ./configs for config files.\n"
        mkdir configs
    fi
    
    # STEP 13 - We seem to have everything we need to create configuration file.
    #
    # copy over parameter file
    cp ./parameters/$PARFILE.par ./configs/$CERTFILE.conf
    #
    # Make sure we start on a new line for keys.
    printf '\n#\n' >> ./configs/$CERTFILE.conf
    printf "# !!!!! Do not change anything below this line. !!!!!\n" >> ./configs/$CERTFILE.conf
    #
    # Add diffie-helman for server configs only.
    if [ "Server" == "$PARMTYPE" ] ; then
        printf '<dh>\n' >> ./configs/$CERTFILE.conf
        cat ./easyrsa3/pki/dh.pem >> ./configs/$CERTFILE.conf
        printf '</dh>\n#\n' >> ./configs/$CERTFILE.conf
    fi
    #
    # Add tls-authority key
    printf '<tls-auth>\n' >> ./configs/$CERTFILE.conf
    cat ./easyrsa3/pki/ta.key >> ./configs/$CERTFILE.conf
    printf '</tls-auth>\n#\n' >> ./configs/$CERTFILE.conf
    #
    # Add certificate authority
    printf '<ca>\n' >> ./configs/$CERTFILE.conf
    cat ./easyrsa3/pki/ca.crt >> ./configs/$CERTFILE.conf
    printf '</ca>\n#\n' >> ./configs/$CERTFILE.conf
    #
    # Add certificate
    printf '<cert>\n' >> ./configs/$CERTFILE.conf
    cat ./easyrsa3/pki/issued/$CERTFILE.crt >> ./configs/$CERTFILE.conf
    printf '</cert>\n#\n' >> ./configs/$CERTFILE.conf
    #
    # Add key
    printf '<key>\n' >> ./configs/$CERTFILE.conf
    cat ./easyrsa3/pki/private/$CERTFILE.key >> ./configs/$CERTFILE.conf
    printf '</key>\n#\n' >> ./configs/$CERTFILE.conf
    #
    printf "OK: Configuration file ./configs/$CERTFILE.conf created.\n"
    #
    # Create a .ovpn configuation file also
    cp ./configs/$CERTFILE.conf ./configs/$CERTFILE.ovpn
    todos ./configs/$CERTFILE.ovpn
    printf "OK: Configuration file ./configs/$CERTFILE.ovpn created.\n"
}

function delete {
    easyrsa_check   # has easyrsa3 been installed?
    ca_check        # has easyrsa3 been initialized?

    if [ $# -lt 1 ] ; then   # need to supply atleast one parameter.
        usage delete
        exit 1
    fi

    # STEP 2 - Drop extension to certificate if supplied
    CERTFILE="${1//.crt}"


    # STEP 3 - Does Certificate Exist
    if [ ! -f ./easyrsa3/pki/issued/$CERTFILE.crt ] ; then
       printf "Error: Certificate file not found.\n"
       exit 1
    fi

    # STEP 4 - Revoke Certificate
    printf "Note: Revoking certificate $CERTFILE.crt\n"
    cd ./easyrsa3/
    ./easyrsa revoke $CERTFILE
    r1=$?
    cd $SETUP_DIR

    # STEP 5 - If revoke successful then rename certificate and delete private key and request
    if [ $r1 -eq 0 ] ;
        then
            if [ ! -d ./easyrsa3/pki/revoked ] ; then
                printf "Note: making directory for revoked certificates.\n"
                mkdir ./easyrsa3/pki/revoked
            fi
            printf "OK: Certificate $CERTFILE has been revoked.\n"
            cd ./easyrsa3/pki
            cp --backup=numbered issued/$CERTFILE.crt revoked/$CERTFILE.revoked.crt
            print "Note: Removing certificate and key files for $CERTFILE.\n"
            rm issued/$CERTFILE.crt
            rm private/$CERTFILE.key
            rm reqs/$CERTFILE.req
            cd $SETUP_DIR
        else
            printf "Error: A certificate removal problem occurred.\n"
            exit 1
    fi

    # STEP 6 - Look for and remove config files.
    if [ -f ./configs/$CERTFILE.conf ] ; then
        printf "Note: Deleting ./configs/$CERTFILE.conf\n"
        rm ./configs/$CERTFILE.conf
    fi

    if [ -f ./configs/$CERTFILE.ovpn ] ; then
        printf "Note: Deleting ./configs/$CERTFILE.ovpn\n"
        rm ./configs/$CERTFILE.ovpn
    fi

    # STEP 7 - Generate a Certificate Revocation List
    crl

}

function pass {
    easyrsa_check   # has easyrsa3 been installed?
    ca_check        # has easyrsa3 been initialized?

    # STEP 1 - Check parameters supplied to script.
    if [ $# -lt 1 ] ; then # needs at least one parameters supplied
        usage pass
        exit 1
    fi

    if [ "NOPASS" == "${2^^}" ] ; then  # requesting to remove password
        NOPASS=""
    fi

    # STEP 2 - Drop extension to key file if supplied
    KEY="${1//.key}"

    # STEP 3 - Change Passphrase
    cd ./easyrsa3/pki/private
    if [ "NOPASS" == "${2^^}" ] ; then
        openssl rsa -in $KEY.key -out $KEY.new
    else
        openssl rsa -aes256 -in $KEY.key -out $KEY.new
    fi

    if [ $? -eq 0 ] ; then
        shred $KEY.key
        mv $KEY.new $KEY.key
        if [ "NOPASS" == "${2^^}" ] ; then
            printf "OK: Pass-Phrase removed from $KEY.\n"
        else
            printf "OK: Pass-Phrase changed for $KEY.\n"
        fi
    else
        printf "Error: Pass-Phrase has not changed.\n"
    fi

    cd $SETUP_DIR
}

function crl {
    easyrsa_check   # has easyrsa3 been installed?
    ca_check        # has easyrsa3 been initialized?

    # Generate a new crl.pem file
    cd ./easyrsa3/
    printf "Note: Generating new Certificate Revocation List\n"

    # apply bug fix
    if [ ! -f ./pki/index.txt.attr ]; then
        printf "Note: Creating file ./easyrsa3/pki/index.txt.attr\n"
        echo "unique_subject = yes" > ./pki/index.txt.attr
    fi

    # generate new crl file and check results.
    if ./easyrsa gen-crl ; then 
        printf "OK: Generation of CRL file was successful.\n"
    else
        printf "Error: Generation of Certificate Revocation List has FAILED.\n"
        printf "Note:  Run ./config crl again to generated CRL.\n"
    fi
    cd $SETUP_DIR
}

# Call the requested function.
case "$1" in 
    initialize)
        initialize $2 $3
        ;;
    create)
        create $2 $3 $4
        ;;
    delete)
        delete $2 
        ;;
    crl)
        crl 
        ;;
    pass)
        pass $2 $3
        ;;
    help)
        usage $2 $3
        ;;
    *)
        usage $1 $2
        ;;
esac
